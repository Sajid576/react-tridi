{"ast":null,"code":"import _slicedToArray from \"/home/sajid/Desktop/WorkSpace/carniba/workspace/reactTridi/react-tridi/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/sajid/Desktop/WorkSpace/carniba/workspace/reactTridi/react-tridi/example/src/App.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport Tridi from 'react-tridi';\nimport 'react-tridi/dist/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar App = function App() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isAutoPlayRunning = _useState2[0],\n      setIsAutoPlayRunning = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pins = _useState4[0],\n      setPins = _useState4[1];\n\n  var tridiRef = useRef(null);\n\n  var frameChangeHandler = function frameChangeHandler(currentFrameIndex) {\n    console.log('current frame index', currentFrameIndex);\n  };\n\n  var recordStartHandler = function recordStartHandler(recordingSessionId) {\n    return console.log('on record start', {\n      recordingSessionId: recordingSessionId,\n      pins: pins\n    });\n  };\n\n  var recordStopHandler = function recordStopHandler(recordingSessionId) {\n    return console.log('on record stop', {\n      recordingSessionId: recordingSessionId,\n      pins: pins\n    });\n  };\n\n  var pinClickHandler = function pinClickHandler(pin) {\n    console.log('on pin click', pin);\n    tridiRef.current.toggleRecording(true, pin.recordingSessionId);\n  };\n\n  var onLoadChange = function onLoadChange(loaded, percentage) {\n    console.log('have all Image loaded? : ' + loaded);\n    console.log('current load percentage : ' + percentage + \"%\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '500px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Tridi, {\n      ref: tridiRef,\n      location: \"./images\",\n      format: \"jpg\",\n      count: \"36\",\n      onFrameChange: frameChangeHandler,\n      autoplaySpeed: 70,\n      onAutoplayStart: function onAutoplayStart() {\n        return setIsAutoPlayRunning(true);\n      },\n      onAutoplayStop: function onAutoplayStop() {\n        return setIsAutoPlayRunning(false);\n      },\n      onRecordStart: recordStartHandler,\n      onRecordStop: recordStopHandler,\n      onPinClick: pinClickHandler,\n      inverse: true,\n      showControlBar: true,\n      showStatusBar: true,\n      mousewheel: true,\n      pins: pins,\n      setPins: setPins,\n      hintOnStartup: true,\n      hintText: \"Drag to view\",\n      onLoadChange: onLoadChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return tridiRef.current.prev();\n      },\n      children: \"Prev\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return tridiRef.current.next();\n      },\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return tridiRef.current.toggleAutoplay(!isAutoPlayRunning);\n      },\n      children: isAutoPlayRunning ? 'Pause' : 'Autoplay'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }, _this);\n};\n\n_s(App, \"WnlCP3nT3I9oG5/ooR3tIR06Huc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/sajid/Desktop/WorkSpace/carniba/workspace/reactTridi/react-tridi/example/src/App.js"],"names":["React","useState","useRef","Tridi","App","isAutoPlayRunning","setIsAutoPlayRunning","pins","setPins","tridiRef","frameChangeHandler","currentFrameIndex","console","log","recordStartHandler","recordingSessionId","recordStopHandler","pinClickHandler","pin","current","toggleRecording","onLoadChange","loaded","percentage","width","prev","next","toggleAutoplay"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\n\nimport Tridi from 'react-tridi';\nimport 'react-tridi/dist/index.css';\n\nconst App = () => {\n\tconst [isAutoPlayRunning, setIsAutoPlayRunning] = useState(false);\n\tconst [pins, setPins] = useState([]);\n\tconst tridiRef = useRef(null);\n\n\tconst frameChangeHandler = (currentFrameIndex) => {\n\t\tconsole.log('current frame index', currentFrameIndex);\n\t};\n\n\tconst recordStartHandler = (recordingSessionId) =>\n\t\tconsole.log('on record start', { recordingSessionId, pins });\n\n\tconst recordStopHandler = (recordingSessionId) =>\n\t\tconsole.log('on record stop', { recordingSessionId, pins });\n\n\tconst pinClickHandler = (pin) => {\n\t\tconsole.log('on pin click', pin);\n\t\ttridiRef.current.toggleRecording(true, pin.recordingSessionId);\n\t};\n\n\tconst onLoadChange = (loaded, percentage) =>{\n\t\tconsole.log('have all Image loaded? : '+ loaded);\n\t\tconsole.log('current load percentage : ' + percentage + \"%\");\n\t}\n\n\treturn (\n\t\t<div style={{ width: '500px' }}>\n\t\t\t<Tridi\n\t\t\t\tref={tridiRef}\n\t\t\t\tlocation=\"./images\"\n\t\t\t\tformat=\"jpg\"\n\t\t\t\tcount=\"36\"\n\t\t\t\tonFrameChange={frameChangeHandler}\n\t\t\t\tautoplaySpeed={70}\n\t\t\t\tonAutoplayStart={() => setIsAutoPlayRunning(true)}\n\t\t\t\tonAutoplayStop={() => setIsAutoPlayRunning(false)}\n\t\t\t\tonRecordStart={recordStartHandler}\n\t\t\t\tonRecordStop={recordStopHandler}\n\t\t\t\tonPinClick={pinClickHandler}\n\t\t\t\tinverse\n\t\t\t\tshowControlBar\n\t\t\t\tshowStatusBar\n\t\t\t\tmousewheel\n\t\t\t\tpins={pins}\n\t\t\t\tsetPins={setPins}\n\t\t\t\thintOnStartup\n\t\t\t\thintText=\"Drag to view\"\n\t\t\t\tonLoadChange = {onLoadChange}\n\t\t\t/>\n\n\t\t\t<button onClick={() => tridiRef.current.prev()}>Prev</button>\n\t\t\t<button onClick={() => tridiRef.current.next()}>Next</button>\n\t\t\t<button onClick={() => tridiRef.current.toggleAutoplay(!isAutoPlayRunning)}>\n\t\t\t\t{isAutoPlayRunning ? 'Pause' : 'Autoplay'}\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}